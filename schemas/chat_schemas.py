# schemas/chat_schemas.py

"""
Defines the Pydantic data models for the API request and response bodies.

This module contains the Pydantic models that ensure data validation and
serialization for the '/api/chat' endpoint. It defines the expected structure
for incoming chat requests and outgoing chat responses, providing a clear
and type-safe contract for the API.
"""

import logging
from typing import List, Optional

from pydantic import BaseModel, Field

logger = logging.getLogger(__name__)


class ChatMessage(BaseModel):
    """
    Represents a single message in the conversation history.

    This model is used within the ChatRequest to structure the history
    of the conversation, allowing the model to maintain context.

    Attributes:
        role (str): The role of the message sender, e.g., 'user' or 'model'.
        content (str): The text content of the message.
    """
    role: str = Field(
        ...,
        description="The role of the message sender, e.g., 'user' or 'model'.",
        examples=["user", "model"]
    )
    content: str = Field(
        ...,
        description="The text content of the message."
    )


class ChatRequest(BaseModel):
    """
    Defines the structure for a chat request body sent to the /api/chat endpoint.

    Attributes:
        query (str): The user's current message or question. Must not be empty.
        session_id (Optional[str]): A unique identifier for the conversation session
            to maintain context on the server. If provided, server-side history
            will be used.
        history (Optional[List[ChatMessage]]): The conversation history sent by the
            client. This is ignored if a session_id is provided and history
            exists on the server for that session.
    """
    query: str = Field(
        ...,
        min_length=1,
        max_length=5000,
        description="The user's current message or question to the chat model."
    )
    session_id: Optional[str] = Field(
        default=None,
        description="A unique identifier for the conversation session to maintain context on the server."
    )
    history: Optional[List[ChatMessage]] = Field(
        default=None,
        description="A list of previous messages to provide conversation context. This is ignored if a session_id is provided."
    )


class ChatResponse(BaseModel):
    """
    Defines the structure for a chat response body from the /api/chat endpoint.

    Attributes:
        response (str): The natural language response generated by the model.
        sources (Optional[List[str]]): A list of sources or tools used to
            generate the response, useful for attribution and debugging.
    """
    response: str = Field(
        ...,
        description="The natural language response generated by the model."
    )
    sources: Optional[List[str]] = Field(
        default=None,
        description="A list of sources or tools used to generate the response, for attribution.",
        examples=[["Tennis API: get_live_scores"], ["Web Search"]]
    )